/*
 * File: app/controller/saki/databinding/ext4style/MainController.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ext5.controller.saki.databinding.ext4style.MainController', {
    extend: 'Ext.app.Controller',

    models: [
        'saki.databinding.PersonModel'
    ],
    stores: [
        'saki.databinding.ext4style.PersonStore'
    ],
    views: [
        'saki.databinding.ext4style.MainView',
        'saki.databinding.ext4style.PersonGridView',
        'saki.databinding.ext4style.PersonFormView',
        'saki.databinding.ext4style.PersonDataView',
        'saki.databinding.ext4style.PersonPanelView'
    ],

    refs: {
        dataView: 'persondataview',
        form: 'personformview',
        panel: 'personpanel',
        grid: 'persongridview'
    },

    init: function(application) {
        var a = this;
        a.listen({
            component: {
                persongridview: {
                    rowselectionchange: "onRowSelectionChange",
                    edit: "onGridEdit"
                },
                persondataview: {
                    itemselectionchange: "onItemSelectionChange"
                },
                "personformview button": {
                    click: "onFormButtonClick"
                },
                "personformview field": {
                    change: "onFormFieldChange"
                }
            }
        });
    },

    onGridEdit: function(c,h) {
        var g = this,
            d = g.getForm(),
            a = g.getPanel(),
            b = g.getLog();

        console.log(d,a, h.record);
        // b({cmp: h.grid, msg: "Grid record editing completed"});
        d.loadRecord(h.record);
        // b({cmp: d, msg: "Form record updated"});
        a.loadRecord(h.record);
        // b({cmp: a, msg: "Panel record updated"});
    },

    onFormFieldChange: function(g) {
        var e = this, d = e.getForm(), b = d.getRecord() || false, a = e.getPanel(), c = e.getLog();
        if (b) {
            d.updateRecord();
        //     c({cmp: d, msg: "Form record updated"});
            a.loadRecord(b);
        //     c({cmp: a, msg: "Panel record updated"});
        }
        d.updateUi();
    },

    onFormButtonClick: function(a) {
        var d = this, b = this.getLog(), c = d.getForm();
        c[a.itemId + "Record"]();
        // b({cmp: c, msg: a.itemId + "Record"});
    },

    onRowSelectionChange: function(c,e) {
        var h = this, b = e[0] || false,
            i = h.getDataView().getSelectionModel(),
            d = h.getLog(),
            g = h.getForm(),
            a = h.getPanel();
        g.loadRecord(b);
        // d({cmp: g, msg: "Record loaded to form"});
        a.loadRecord(b);
        // d({cmp: a, msg: "Record loaded to panel"});
        if (b) {
            i.select([b]);
        //     d({cmp: "ExampleCdb.view.PersonDataView", msg: "Selection synced"});
        } else {
            i.deselectAll();
        //     d({cmp: "ExampleCdb.view.PersonDataView", msg: "All items deselected"});
        }
    },

    onItemSelectionChange: function(c,g) {
        var i = this, b = g[0] || false, e = i.getLog(), h = i.getForm(), d = i.getGrid(), a = i.getPanel();
        h.loadRecord(b);
        // e({cmp: h, msg: "Record loaded to form"});
        a.loadRecord(b);
        // e({cmp: a, msg: "Record loaded to panel"});
        d.getSelectionModel().select(g, false, true);
        // e({cmp: d, msg: "Selection synced"});
    },

    getLog: function() {
        // var a = this.getApplication().logger;
        // return Ext.Function.bind(a.log, a);
    }

});
