/*
 * File: app/view/saki/databinding/ext4style/PersonGridView.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ext5.view.saki.databinding.ext4style.PersonGridView', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.persongridview',

    requires: [
        'ext5.view.saki.databinding.ext4style.PersonGridViewViewModel',
        'Ext.grid.column.Number',
        'Ext.grid.column.Date',
        'Ext.grid.column.Boolean',
        'Ext.grid.View'
    ],

    viewModel: {
        type: 'sakidatabindingext4stylepersongridview'
    },
    cls: 'person-grid',
    height: 250,
    width: 400,
    title: 'My Grid Panel',
    store: 'saki.databinding.ext4style.PersonStore',

    columns: [
        {
            xtype: 'gridcolumn',
            dataIndex: 'string',
            text: 'String'
        },
        {
            xtype: 'numbercolumn',
            dataIndex: 'number',
            text: 'Number'
        },
        {
            xtype: 'datecolumn',
            dataIndex: 'date',
            text: 'Date'
        },
        {
            xtype: 'booleancolumn',
            dataIndex: 'bool',
            text: 'Boolean'
        }
    ],

    initComponent: function() {
        var b=this,
            a={};
        Ext.apply(a,{
        //     store:Ext.getStore("PersonStore"),
            columns:[{
                text:"First Name",
                dataIndex:"fname",
                editor:{
                    xtype:"textfield"
                }
            },{
                text:"Last Name",
                flex:1,
                dataIndex:"lname",
                editor:{
                    xtype:"textfield"
                }
            },{
                text:"Age",
                dataIndex:"age",
                editor:{
                    xtype:"numberfield"
                }
            }],
            listeners:{
                scope: b,
                selectionchange:"onSelectionChange"
            },
            selModel:{},
            plugins:[{
                ptype:"cellediting",
                clicksToEdit:2,
                pluginId:"cellediting"
            }],
            tbar:{
                xtype:"toolbar",
                items:["->",{
                    text:"Deselect",
                    itemId:"deselect",
                    cls:"btn-deselect",
                    handler:b.onDeselect,
                    scope:b,
                    glyph:61766
                },{
                    text:"Add Record",
                    itemId:"addRecord",
                    cls:"btn-add",
                    glyph:61543,
                    handler:b.onAddRecord,
                    scope:b
                }]
            }
        });
        Ext.apply(b,a);
        b.callParent(arguments);
    },

    onDeselect: function() {
        this.getSelectionModel().deselectAll();
    },

    onAddRecord: function() {
        var c = this, b = c.getStore(), a = b.add({})[0];
        c.getPlugin("cellediting").startEdit(a, 0);
    },

    onSelectionChange: function(a,c,b) {
        this.fireEvent("rowselectionchange", this, c, b);
    }

});