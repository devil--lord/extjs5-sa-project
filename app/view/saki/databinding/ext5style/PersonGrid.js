/*
 * File: app/view/saki/databinding/ext5style/PersonGrid.js
 *
 * This file was generated by Sencha Architect version 3.1.0.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 5.0.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 5.0.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('ext5.view.saki.databinding.ext5style.PersonGrid', {
    extend: 'Ext.grid.Panel',
    alias: 'widget.persongrid',

    requires: [
        'ext5.view.saki.databinding.ext5style.PersonGridViewModel',
        'Ext.grid.column.Number',
        'Ext.form.field.Number',
        'Ext.grid.View',
        'Ext.grid.plugin.CellEditing'
    ],

    config: {
        currentPerson: null
    },

    viewModel: {
        type: 'sakidatabindingext5stylepersongrid'
    },
    publishes: [
        'currentPerson'
    ],
    height: 250,
    width: 400,
    header: {
        title: 'Person Grid',
        padding: '4 9 5 9',
        items: [
            {
                text: 'New2',
                xtype: 'button',
                itemId: 'add',
                glyph: 0xf067,
                handler: 'onGridButton'
            },
            {
                text: 'Reject All',
                xtype: 'button',
                itemId: 'reject',
                handler: 'onGridButton',
                disabled: true,
                bind: {
                    disabled: '{!storeDirty}'
                },
                glyph: 0xf0e2,
                margin: '0 0 0 5'
            },
            {
                text: 'Commit All',
                xtype: 'button',
                itemId: 'commit',
                handler: 'onGridButton',
                disabled: true,
                bind: {
                    disabled: '{!storeDirty}'
                },
                glyph: 0xf00c,
                margin: '0 0 0 5'
            }
        ]
    },
    titleCollapse: false,

    bind: {
        currentPerson: '{currentPerson}',
        title: '{currentPerson.name}',
        store: '{persons}'
    },
    columns: [
        {
            xtype: 'gridcolumn',
            dataIndex: 'fname',
            text: 'First Name',
            editor: {
                xtype: 'textfield',
                bind: {
                    value: '{currentPerson.fname}'
                }
            }
        },
        {
            xtype: 'gridcolumn',
            dataIndex: 'lname',
            text: 'Last Name',
            flex: 1,
            editor: {
                xtype: 'textfield',
                bind: {
                    value: '{currentPerson.lname}'
                }
            }
        },
        {
            xtype: 'numbercolumn',
            width: 120,
            dataIndex: 'age',
            text: 'Age',
            editor: {
                xtype: 'numberfield',
                bind: {
                    value: '{currentPerson.age}'
                }
            }
        }
    ],
    plugins: [
        {
            ptype: 'cellediting',
            pluginId: 'cellediting'
        }
    ],

    initConfig: function(instanceConfig) {
        var me = this,
            config = {};
        me.processSakidatabindingext5stylePersonGrid(config);
        if (instanceConfig) {
            me.getConfigurator().merge(me, config, instanceConfig);
        }
        return me.callParent([config]);
    },

    processSakidatabindingext5stylePersonGrid: function(config) {
        Ext.apply(config, {
            listeners : {
                scope: 'this',
                select : 'onPersonSelect'
            }
        });
    },

    /* 외부에서 currentPerson을 변경할 경우 내부 그리드를 선택, 비 선택하도록 하기위함. */
    updateCurrentPerson: function(current,previous) {
        var sm = this.getSelectionModel();
        if(current){
            sm.select(current);
        }
        if(previous){
            sm.deselect(previous);
        }
    },

    onPersonSelect: function(grid,person) {
        this.setCurrentPerson(person);
    }

});